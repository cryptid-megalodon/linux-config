# Google specifc Blake additions
export LOGS='/usr/local/google/tmp'
export VM='cloudmegalodon.c.googlers.com'
export DT='megalodon0.sbo.corp.google.com'
export AC_DB='/span/global/youtube-music-corpus-database:artist-corpus'
alias acid='/google/bin/releases/mobile-devx-platform/acid/acid'
alias admin_session='/google/data/ro/projects/tonic/admin_session'
alias downloader='/google/data/ro/teams/yt-data4dev/sherlog_replies/downloader/live/downloader.par'
alias epg_server='/google/src/head/depot/google3/video/youtube/utils/elements/tools/playground/epg_server'
alias er='/google/data/ro/users/ho/hooper/er'
alias gpaste='/google/src/head/depot/eng/tools/pastebin'
alias gpython='/google/bin/releases/gpython-team/gpython/gpython.par'
alias g3python='/google/data/ro/projects/g3python/g3python'
alias g4green='g4 sync @$(/home/build/static/projects/testing/tap/scripts/last_green_cl --project youtube.primary)'
alias g4e='g4 sync && g4 fix && g4 upload'
alias innercap='/google/data/ro/projects/youtube/innertube/innercap'
alias keexphelper='/google/data/ro/teams/ke-graph-exp/tools/keexphelper'
alias loas_creds.sh='/google/src/head/depot/google3/identity/tools/creds/loas_creds.sh'
alias loop="/google/src/head/depot/google3/video/youtube/testing/tools/build_and_test"
alias mysqlg='/google/data/ro/projects/speckle/mysql'
alias mysqladming='/google/data/ro/projects/speckle/mysqladmin'
alias mysqlbinlogg='/google/data/ro/projects/speckle/mysqlbinlog'
alias mysqldumpg='/google/data/ro/projects/speckle/mysqldump'
alias node_config_cli='/google/data/ro/projects/kernel-sre/node_config_cli'
alias pastebin='/google/src/head/depot/eng/tools/pastebin'
alias placercfg='/google/data/ro/teams/ads-sre-build/placercfg/placercfg'
alias ppg_client_setup='/google/data/ro/teams/yt-live-engprod/ppg_client_setup'
alias pyformat='/google/data/ro/projects/devtools/pyformat/pyformat'
alias secstodate='f() { echo $(date +"%c" --date @"$1"); unset -f f; }; f'
alias sherlog_replies_server='/google/data/ro/teams/yt-data4dev/sherlog_replies/server/live/server.par'
alias oac-export-query='/google/src/head/depot/google3/experimental/users/schurchill/oac-export-query'
alias blaze_run='/google/src/head/depot/google3/devtools/blaze/scripts/blaze-run.sh'
alias bluze='/google/data/ro/teams/blueprint/bluze'
alias tm_feed='fileutil cat $(fileutil ls --sharded /placer/prod/home/youtube-music-events/partner_feeds/ticketmaster/*/feed.json.gz | sort | tail -1) | gunzip -c | less'
alias jadep='/google/data/ro/teams/jade/jadep'
alias a='hg amend'
alias u='hg uploadchain'
alias au='hg amend && hg uploadchain'
alias e='g4d fig_events@events'
alias loop="/google/src/head/depot/google3/video/youtube/testing/tools/build_and_test"
alias mendelbrot='/usr/bin/mendel --frontend=youtube'
alias pyfactor='/google/data/ro/teams/youtube-code-health/pyfactor'

function download() {
  today=$(date '+%Y/%m/%d')
  downloader $1 $2 $today --flagfile=flags/watchpage
}

# Sync repository to last green cl for youtube TAP project
function hggreen {
  GREEN=$(/home/build/static/projects/testing/tap/scripts/last_green_cl --project youtube.primary)
  hg pull -r "cl(${GREEN})"
  hg update -r "cl(${GREEN}, exact=False)"
}

# PPG
alias build_ppg='blaze build //video/youtube/src/tools/ppg:playground && alert "PPG build finished."'
function run_ppg {
  g4d
  ./blaze-bin/video/youtube/src/tools/ppg/playground
}
alias build_and_run_ppg='build_ppg && run_ppg'

# Wrapper around g4d, to make it fig compatible.
function _g4d() {
  # copied from $(type g4d)
  _g4d__fix_dir;
  typeset dir;
  dir=$("${P4_LOCATION:-/usr/bin/p4}" g4d $*) && cd $dir
}

function g4d() {
  if [[ "$1" =~ ^[/@] ]]; then
    # we are attempting to navigate somewhere in this client
    if [[ $(pwd) =~ ^/google/src/cloud/[^/]+/([^/]+) ]]; then
      # we are in a citc directory
      if [ -d "${BASH_REMATCH[0]}/.hg" ]; then
        # we are in a fig directory
        _g4d "${BASH_REMATCH[1]}$1" "${@:2}"
        return
      fi
    fi
  fi

  _g4d "$@"
}

# Load whenever a new terminal is opened, but check for valid prodaccess first.
# 1) Load fortune
# 2) Import pmcg C++ functions
prodcertstatus &> /dev/null &&
  /google/data/ro/users/di/diamondm/engfortunes/fortune.sh &&
  source /google/src/head/depot/google3/experimental/users/pmcg/work/bash/public.sh
